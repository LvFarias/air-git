#!/usr/bin/env node
"use strict";

// IMPORT PACKAGES TO PROJECT
const minimist = require('minimist');

// IMPORT FILES PROJECT
const help = require('../files/help');
const colors = require('../helpers/colors');
const versionTool = require('../helpers/versionTool');

// IMPORT COMMANDS PROJECT
const init = require('../commands/init');
const commit = require('../commands/commit');
const featureInit = require('../commands/featureInit');
const featureFinish = require('../commands/featureFinish');
const bugfixInit = require('../commands/bugfixInit');
const bugfixFinish = require('../commands/bugfixFinish');
const toStage = require('../commands/toStage');
const toProd = require('../commands/toProd');
const updateProject = require('../commands/updateProject');

// GET ARGUMENTS
let args = minimist(process.argv.slice(2));

async function main() {
    // RUN COMMANDS BY ARGUMENTS
    if (!!args.h || !!args.help) {
        let helpReturn = help.default;
        const helpValue = String(args._[0] || args.h || args.help);

        if (helpValue != 'true') {
            helpReturn = help[helpValue] ? help[helpValue] : 'invalid command to help';
        }

        console.log(helpReturn);
        return;
    }
    if ((!!args.v || !!args.version) && args._.length <= 0) {
        const pjson = require('../package.json');

        console.log(`${colors.Bright}${colors.fg.Cyan}v${pjson.version}${colors.Reset}`);
        return;
    }

    // RUN COMMANDS DEFAULTS
    if (args._.length > 0) {
        switch (args._[0]) {
            case 'init':
                await init(args);
                break;
            case 'commit':
                await commit(args);
                break;
            case 'feature':
                if (args._[1] === 'init') {
                    await featureInit(args);
                } else if (args._[1] === 'finish') {
                    await featureFinish(args);
                } else {
                    console.log(`${args._[0]} ${args._[1]} is not valid command`);
                }
                break;
            case 'bugfix':
                if (args._[1] === 'init') {
                    await bugfixInit(args);
                } else if (args._[1] === 'finish') {
                    await bugfixFinish(args);
                } else {
                    console.log(`${args._[0]} ${args._[1]} is not valid command`);
                }
                break;
            case 'to':
                if (args._[1] === 'stage') {
                    await toStage(args);
                } else if (args._[1] === 'prod') {
                    await toProd(args);
                } else {
                    console.log(`${args._[0]} ${args._[1]} is not valid command`);
                }
                break;
            case 'update':
                await updateProject(args);
                break;
            default:
                console.log(`${args._[0]} is not valid command`);
                break;
        }
    }
    await versionTool.checkNewVersion();
}

main();